auctionSystem {
  name = "auctionSystem"
}

remoteAuctionPublisher {
  name = "remoteAuctionPublisher"
}

auction {
  defaultTime = 8000
}

buyer {
  defaultBids = 1
  defaultFrequency = 2000
  defaultLaziness = 100
}

auctionSearch {
  name = "auctionSearch"
}

notifier {
  name = "notifier"
}

akka {
  loglevel = DEBUG
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      receive = on
    }
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
    }
  }
  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
      //plugin = "inmemory-journal"
      leveldb.native = off
      leveldb.dir = "target/journal"
    }
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      //plugin = "inmemory-snapshot-store"
      local.dir = "target/snapshots"
    }
  }
}

auctionSystemServer.akka.remote.netty.tcp.port = 2552
remoteAuctionPublisherServer.akka.remote.netty.tcp.port = 2553

inmemory-read-journal {
  # Absolute path to the write journal plugin configuration section to get the event adapters from
  write-plugin = "inmemory-journal"

  # there are two modes; sequence or uuid. If set to "sequence" and NoOffset will be requested, then
  # the query will return Sequence offset types. If set to "uuid" and NoOffset will be requested, then
  # the query will return TimeBasedUUID offset types. When the query is called with Sequence then
  # the query will return Sequence offset types and if the query is called with TimeBasedUUID types then
  # the query will return TimeBasedUUID offset types.
  offset-mode = "sequence"

  # ask timeout on Futures
  ask-timeout = "10s"

  # New events are retrieved (polled) with this interval.
  refresh-interval = "100ms"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "100"
}
